@startuml Model 3

'les differentes cartes : 

'Cette classe rassemble les elements commun à chaques cartes 
abstract class Carte{
    - materiaux_construction_primaires : *RassourcePrimaire[4]
    - materiaux_construction_secondaires : *RessourceSecondaire[2]
    - cout_construction : unsigned int

    -position : unsigned int
    -accessible : bool
    -face_visible : bool
    
    + const get_type() -> string
    + const get_position() -> unsigned int
    + const est_accessible() -> bool
    + const est_face_visible -> bool

    + out()
    + rend_accessible(bool)
    + rend_face_visible(bool)
}

'Notes : J'ai compté pour les listes 4 et 2 en longueurs suffisent
'Age est une enumeration

'La methode gettype renvoie le type de la carte ("Science", "Militaire", "Commerce"...)

'out met tous les arguments d'etat de la carte a None, (position, facevisible et accessible)





'-----------------------------LES AUTRES CARTES--------------------'
'Hérite tous de la classe carte carte

'Une Merveille est techniquement une carte
class Merveille{
    - capacite : *Capacite[3]
    - pt_victoire : unsigned int
    - production : *RessourceSecondaire[3]

    + const exec_capacite()
}
'Les Merveille Grand Phare et Piree peuvent produire une ressource

'Les autres types de cartes

'Cartes marrons 
class CarteRessourcePrimaire{
    - production : *RessourcePrimaire[2]
}

'Cartes gris
class CarteRessourceSecondaire{
    - production : RessourceSecondaire
}
'Pas de liste car produit toujours 1 seul ressource

'Cartes Jaunes
class CarteCommerce{
    - production_primaire : *RessourcePrimaire[2]
    - production_secondaire : *RessourceSecondaire[2])
    - capacite : Capacite
    - symbole_chainage : SymboleChainage
    - choix : boolean 
    - contrpartie : int 
    - pt_victoire : unsigned int

    + const exec_capacite()
}
'Choix defini si la production doit etre choisi entre differentes ressources ou non
'Contrepartie defini si il faut "acheter" la ressource produite ou non, on notera 0 si ce n'est pas le cas

'exec_capacite() regarde l'attribut "capacite", et execute la fonction correspondante
'on rajoutera un méssage d'erreur si la capacite n'est pas possible

'Cartes Verts
class CarteScience{
    - symbole_science : SymboleScience
    - symbole_chainage : SymboleChainage
    - pt_victoire : unsigned int
    - capacite : Capacite:ajoutersymbolescience

    + const exec_capacite()
}
'SymboleScience est une enumerations des symboles Science disponible dans le jeu
'SymboleChainage est une enumerations des symboles Science disponible dans le jeu

'Cartes Rouges
class CarteMilitaire{
    - militaire : Capacite:avancemilitaire

    + const exec_capacite()
}

'Cartes Bleu
class CartePrestige{
    - symbole_chainage : SymboleChainage
    - pt_victoire : unsigned int
}

'Cartes Violets
class CarteGuilde{
    - effet_guilde : EffetGuilde

    + const exec_effet_guilde()
}
'EffetGuilde est un enumération defini après

'execEffetGuilde() effectue l'effet de guilde correspondant, a voir au niveau des arguments


CarteMilitaire --|> Carte
CarteCommerce --|> Carte
CarteScience --|> Carte
CartePrestige --|> Carte
CarteGuilde --|> Carte
CarteRessourcePrimaire --|> Carte
CarteRessourceSecondaire --|> Carte
Merveille --|> Carte


'-----------------------------------------ATTENTION !!!-----------------------------------------------------'
'Tout elements se déclanchant qu'une seul fois, à la création de la carte est considéré comme une capacitée 
'Il existe une enumération capacité, définie plus loin

'---------------------------------------ENUMERATIONS LIE AUX CARTES-----------------------------------------'



'Permet de ne pas payer une carte si elle comporte le meme symbole qu'une carte déja construite par le joueur
enum SymboleChainage{
    jarre 
    toneau
    masque 
    temple 
    soleil 
    goute 
    lune 
    pilier 
    cible 
    casque 
    feracheval 
    epee 
    tour 
    lyre 
    engrenage 
    livre 
    lampe 
}

CartePrestige "*" *-- "*" SymboleChainage
CarteMilitaire "*" *-- "*" SymboleChainage
CarteScience "*" *-- "*" SymboleChainage
CarteCommerce "*" *-- "*" SymboleChainage

'Symbole se trouvant sur les cartes sciences, 
'2 symbole similaire entraine la prise d'une jeton science pour le joueur, 
'6 symbole different entraine une victoire scientifique
enum SymboleScience{
    roue 
    plume 
    pilon 
    balance 
    globeterrestre 
    filaplomb
    bateau 
}

CarteScience "*" -- "*" SymboleScience

'Enumerations contenant les differents effets de Guilde (cartes violettes)
enum EffetGuilde{
    guilde_armateurs
    guilde_batisseurs
    guilde_commerçants
    guilde_magistrats
    guilde_tacticiens
    guilde_scientifiques
    guilde_usuriers
}
'Se referer à la fiche dans le docs pour les effets de chaques guides
CarteGuilde "*" -- "*" EffetGuilde

'Les differentes capacité retrouvables sur certaines cartes, notement sur les cartes Merveille, militaire et de commerce
enum Capacite{
    rejouer
    detruire_carte_marron
    detruire_carte_grise
    jouer_carte_defausse
    gagner_monnaie
    avancee_militaire
    choisir_jeton_science
    ajouter_symbole_science
}
'Je pense que les noms sont suffisement explicites, mais n'hésitez pas à poser des question si ce n'est pas clair

Capacite "*"  -- "*" CarteCommerce
Capacite "0..1"  -- "*" CarteMilitaire
Capacite "*"  -- "*" Merveille
Capacite "0..1" -- "*" CarteScience


'Les Ressources sont utilisé par les joureurs pour construir des batiments
'Elles sont produites par certaines cartes
enum RessourcePrimaire{
    pierre
    bois
    brique
}

CarteRessourcePrimaire "*" *-- "*" RessourcePrimaire
CarteCommerce "*" *-- "*" RessourcePrimaire


enum RessourceSecondaire{
    eau
    parchemin
}

CarteRessourceSecondaire "*" *-- "*" RessourceSecondaire
CarteCommerce "*" *-- "*" RessourceSecondaire
Merveille "*" *-- "*" RessourceSecondaire



'-------------------------LES JETONS SCIENCES------------------------'
'Il sont au nombre de 10 avec des effets uniques

class JetonScience{
    - capacite_science : CapaciteScience

    +const exec_capacite_science()
}
'CapaciteScience est une enumération des effets de chaques jetons, voir ci dessous

'Capacité déclanchées par les jetons sciences
enum CapaciteScience{
    agriculture
    architecture
    economie
    loi
    maconnerie
    urbanisme
    theologie
    strategie
    philosophie
    mathematique
}
'Ce référer à la fiche pour les detailles de chaques capacitées
JetonScience "1" *-- "1" CapaciteScience

class JetonMalus{
    capacite : Capacite: perdreArgent
    joueur_cible : Joueur

    +const exec_capacite()
}

class PlateauMilitaire{
    avance : unsigned int 
    liste_jetons_malus : *JetonMalus[4]
    joueur_derriere : Joueur
    

    +update_avance(unsigned int, Joueur)
    +retirer_jeton(JetonMalus)
}

PlateauMilitaire "1" *-- "4" JetonMalus
'Jdevant permet a la fois, en composant avec avance de savoir la position du jetons d'avancée miliaire
'Permet egalement de savoir directement quelle joueur est le moins avancé militairement, 
'ce qui permet de savoir quelles est le joueur qui doit commencer le nouvel age, ainsi que le joueur qui doit subir un malus

'updateavance(unsigned int, Joueur) permet d'avancer 
'le jeton d'un certain nombre de case en faveur du Joueur donnée en argument, (modifie avance et Jderiere si necessaire)

'retirer_jeton permet de retirer le jeton d'une case alors le joueur le moins avancé militairement subit un malus, 
'Utiliser la fonction appliquerCapacite de JetonMalus

class PlateauCarte{
    - age : int {1, 2, 3}
    - liste_carte_en_jeu : &Carte[20] ][20]
    - nb_merveilles_construites : unsigned int
    - defausse : &Cartes[60]

    + set_age(int)
    + rend_accessible(&Carte)
    + rend_face_visible(&Carte)
    + prendre(&Carte)
    + defausser(&Carte)

    + const get_cartes_visibles() -> &Carte[]
    + const get_cartes_accessibles() -> &Carte[]
}

'set_age modifie l'age du plateau carte
'La methode rendaccessible(&Carte) permet de rendre FaceVisible et Accessible la carte Carte
'La methode prendre(&Carte) permet de supprimer la carte de la liste carte en Jeu
'La methode deffausser(&Carte) permet de mettre en defausse la carte et de la suprimmer de la liste des cartes en jeu
'getcartevisible() renvoie la liste des cartes faces visibles
'getcarteaccessible() renvoie la liste des cartes accessibles et donc face visible



'Le plateau Scientifique permet de gerer les jetons scientifique
class PlateauScience{
    jeton_in_game: *JetonScience[5]
    liste_position : unsigned int[5] 
    jeton_out_game: *JetonScience[5]

    + tirer_jeton() -> JetonScience[3]
    + retirer_jeton(unsigned int)

}

JetonScience "5" --* "1" PlateauScience

'JetonInGame represente les jetons visibles et recupérables par les joueurs
'JetonsOutGame sont les jetons non tiré pour la partie, qui sont quand meme récuperables grace à des merveilles

'tirerjeton() tire 3 jeton aléatoirement dans jetonOUtGame, utilisé par la capacitée choisirjeton
'retirer jeton, retire le jeton ayant pour position Position de la liste jetonInGame


'/////////////IMPORTANT\\\\\\\\\\\\\\\
' Après réfléxion, je pense qu'il faut laisser les cartes et Merveilles crée dans les classes joueurs et non dans des plateaux appareant au joureurs 
'Car pour l'interface graphique ca ne change rien, et ce sera plus simple pour acceder au differents cout, sans avoir a aller chercher les cartes crées dans des plateau séparé de joueurs


'plateaumilitaire decrit l'avancé militaire d'un joueur vers le camps adverse, 
'nbmerveilles renseigne le nombre de merveilles déjà construites, pour rappel, on ne peut construire que 7 merveille dans une partie
Carte "*" --* "1" PlateauCarte
Joueur "2" -- "1" PlateauCarte
Joueur "2" -- "1" PlateauScience
Joueur "2" -- "1" PlateauMilitaire


'-------------------------------GESTION DU PLATEAU DE JEU------------------------


'Cette classe decrit l'etat du plateau de jeu à chaque instant
class Joueur{
    - carte_construite : *Carte[60]
    - jeton_construit : *JetonScience[6]
    - monnaie : unsigned int

    + update_monnaie(int)
    + get_production() -> Production
    + get_cout(&Carte) -> unsigned int
    + est_constructible(&Carte, &PlateauCarte) -> bool
    + construire_carte(&Carte, &PlateauCarte) -> None
    + construire_merveille(&Merveille, &Carte, &PlateauCarte) -> None
    + get_pt_victoire()
    + choisir_action(&Carte)
}
'60 car 20*3 = 60 le nombre de carte max qu'un joueur vera dans sa partie
'La fonction Verifie que la carte est accessible sur le Plateau (probablement via une méthode implémenté dans Plateau),
'Et effetue l'Action choisit par le joueur

'Si l'action choisit est construir ou merveille, alors le fonction vérifira que la carte ou la merveille est construissable puis l'ajoutera aux carte construites
'Si l'action chosit est de défausser la carte, la carte sera ajouté à la défausse du Plateau, et le joueur gagnera de la monnaie, 
'Dans tout les cas, la carte sera suprimé des cartes accésibles du plateau

'La méthode updatemonnaie permet d'ajouter ou retirer une quantité de monnaie donnée au joueur 

'La méthode getProduction() renvoie la production du joueur, pour cela elle interoge les cartes situées dans Carte

'La méthode getcout(Carte) renvoie le cout en monnaie, pour la construction de la carte Carte

'La méthode estconstructible(Carte) prend une carte en arguement Carte, et le joueur, car on fait Joueur.estconstructible(Carte)
'renvoie les cartes consturctible par le joueur, cad les cartes tel que Joueur.getcout(Carte) <= monnaie

'La fonction construire(Carte), ajoute Carte à carteconstruite et retire Joueur.getcout(Carte) à Joueur.monnaie 

'getptdevictoire() calcule le nombre de Pt de victoire du joueur, à executer en fin de partie

'Choisir action Carte, demande au joueur de Choisir une carte ACCESSIBLE, une fois la carte choisit elle est soit defaussé, soit construite, soit elle construit une merveille
Joueur "2" -- "*" Carte

@enduml
